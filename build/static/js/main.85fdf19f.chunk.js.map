{"version":3,"sources":["serviceWorker.js","components/card-components/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","MyFirstApp.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","MyFirstApp","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filtered_monsters","filter","toLowerCase","includes","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2SAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCfOC,G,kBAAM,SAACC,GAChB,OAAO,yBAAKC,UAAY,kBACxB,yBAAKC,IAAK,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACnB,gCAAML,EAAMI,QAAQE,KAApB,KACA,2BAAG,+BAAKN,EAAMI,QAAQG,OAAtB,QCHKC,EAAW,SAACR,GAErB,OAAQ,yBAAKC,UAAU,aAAf,IAA6BD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1D,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,GAAhC,UCHIQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BAAOb,UAAY,SACnBc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCuCCG,E,kDA1Cb,aAAc,IAAD,8BACX,gBAYFH,aAAe,SAACI,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAZrC,EAAKC,MAAM,CAACd,SAAS,GACnBW,YAAY,IAHH,E,gEAOQ,IAAD,OAChBI,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAO,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAUmB,S,+BAQ7C,IAAD,EAC+BC,KAAKN,MAA3Bd,EADT,EACSA,SAASW,EADlB,EACkBA,YACVU,EAAoBrB,EAASsB,QACH,SAAA3B,GAAO,OAAEA,EAAQE,KAAK0B,cACXC,SAASb,EAAYY,kBAEhE,OAEE,yBAAK/B,UAAU,OACb,wCACA,kBAAC,EAAD,CACEY,YAAa,kBACbC,aAAgBe,KAAKf,eAGvB,kBAAC,EAAD,CACEL,SAAYqB,S,GAnCGI,aCEzBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SLyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.85fdf19f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card= (props) =>{\r\n    return(<div className = 'card-container'>\r\n    <img alt= 'monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h2> {props.monster.name} </h2>\r\n        <p><i> {props.monster.email}</i> </p>\r\n        </div>)\r\n}\r\n","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from './../card-components/card.component';\r\n\r\nexport const CardList = (props) => \r\n{   \r\n    return (<div className='card-list'> {props.monsters.map(monster => \r\n        (<Card key={monster.id} monster={monster}> </Card>))}\r\n        </div>);\r\n}","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input className = 'search'\r\n    type='search' \r\n    placeholder={placeholder} \r\n    onChange={handleChange}/>\r\n    \r\n)","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { CardList } from './components/card-list/card-list.component';\r\nimport {SearchBox} from './components/search-box/search-box.component';\r\nclass MyFirstApp extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state={monsters:[],\r\n      searchField:''\r\n        }\r\n  }\r\n\r\n  componentDidMount() {\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then( response => response.json())\r\n      .then ( users => this.setState({monsters: users}))  \r\n  }\r\n\r\n  handleChange = (e) => {\r\n     this.setState({searchField:e.target.value});\r\n  }\r\n\r\n  render()\r\n  {\r\n    const {monsters,searchField}=this.state;\r\n    const filtered_monsters = monsters.filter(\r\n                                    monster=>monster.name.toLowerCase()\r\n                                              .includes(searchField.toLowerCase()))  ;\r\n    \r\n    return(\r\n\r\n      <div className=\"App\">\r\n        <h1>Monsters</h1>\r\n        <SearchBox \r\n          placeholder= 'search monsters' \r\n          handleChange = {this.handleChange}>\r\n        </SearchBox>\r\n\r\n        <CardList \r\n          monsters = {filtered_monsters}>\r\n        </CardList>\r\n\r\n      </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default MyFirstApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport MyFirstApp from './MyFirstApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyFirstApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}